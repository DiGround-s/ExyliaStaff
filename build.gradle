plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'net.exylia'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = uri("https://repo.codemc.io/repository/maven-releases/") }

    maven { url = uri("https://repo.codemc.io/repository/maven-snapshots/") }
}

dependencies {
    compileOnly 'com.zaxxer:HikariCP:5.1.0'
    compileOnly 'org.xerial:sqlite-jdbc:3.45.2.0'
    compileOnly 'mysql:mysql-connector-java:8.0.33'
    compileOnly("com.github.retrooper:packetevents-spigot:2.7.0")
    implementation('net.exylia:exyliacommons:1.0.0') {
        exclude group: 'com.zaxxer', module: 'HikariCP'
        exclude group: 'org.xerial', module: 'sqlite-jdbc'
        exclude group: 'mysql', module: 'mysql-connector-java'
        exclude group: 'com.github.retrooper', module: 'packetevents-spigot'
    }

    compileOnly 'io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT'
}

tasks {
    build {
        dependsOn shadowJar
    }

    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.18")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set('')
    minimize()
    relocate 'net.exylia.commons', 'net.exyliastaff.shadow.commons'
}
